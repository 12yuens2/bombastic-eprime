language ESSENCE' 1.0

$$$$ Parameters $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ grid has r rows, c columns
$
$ c1 c2 c3 c4
$ 0 0 0 0 0 0 r1
$ 0 2 2 1 2 0 r2
$ 0 1 1 2 2 0 r3
$ 0 2 0 2 2 0 r4
$ 0 0 0 0 0 0 r5
$
$ 0: dead, 1: ice, 2: normal
$ We assume that every grid is surrounded by dead cells
given gridInit : matrix indexed by [int(1..r), int(1..c)] of int(0..2)

$ Initial positions of avatar and blocks
$ Doing it like this to check c, r compliance.
given avatarInitRow : int(1..r)
given avatarInitCol : int(1..c)

given numBlocks : int 
given blocksInitRow : matrix indexed by [int(1..numBlocks)] of int(1..r)
given blocksInitCol : matrix indexed by [int(1..numBlocks)] of int(1..c)

$ Goal positions of blocks
given blocksGoalRow : matrix indexed by [int(1..numBlocks)] of int(1..r)
given blocksGoalCol : matrix indexed by [int(1..numBlocks)] of int(1..c)

$ Number of steps
given steps : int(1..)
$$$$ End of Parameters $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

$$$$ Decision Variables $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

$ Decompose into row/col to control domain bounds separately/easily
find moveRow : matrix indexed by [int(1..steps)] of int(-1..1)
find moveCol : matrix indexed by [int(1..steps)] of int(-1..1)

$ State variables. Convention is that 0 is initial position,
$ so i is state _after_ move in step i.
find avatarCurrentRow : matrix indexed by [int(0..steps)] of int(1..r)
find avatarCurrentCol : matrix indexed by [int(0..steps)] of int(1..c)
find blocksCurrentRow : 
  matrix indexed by [int(0..steps), int(1..numBlocks)] of int(1..r)
find blocksCurrentCol :
  matrix indexed by [int(0..steps), int(1..numBlocks)] of int(1..c)
find gridCurrent : 
  matrix indexed by [int(0..steps), int(1..r), int(1..c)] of int(0..2)

$$$$ End of Decision Variables $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

$heuristic srf

such that

$$$$
$ Initial states
$$$$

$ Avatar's initial position
avatarCurrentRow[0] = avatarInitRow,
avatarCurrentCol[0] = avatarInitCol,

$ Initial locations for blocks
forall block : int(1..numBlocks) .
    blocksCurrentRow[0,block] = blocksInitRow[block] /\
    blocksCurrentCol[0,block] = blocksInitCol[block],

$ Initial cells of grid
forall row : int(1..r) .
    forall col : int(1..c) .
        gridCurrent[0,row,col] = gridInit[row,col],



$$$$
$ Goal state
$$$$

$ All blocks are in a goal
forall block : int(1..numBlocks) .
    exists goal : int(1..numBlocks) . 
        blocksCurrentRow[steps,block] = blocksGoalRow[goal] /\
	blocksCurrentCol[steps,block] = blocksGoalCol[goal],



$$$$
$ Invalid states
$$$$

$ Avatar current row/col cannot be on dead cells
forall step : int(0..steps) .
    forall row : int(1..r) .
        forall col : int(1..c) .
	    gridCurrent[step,row,col] = 0 -> avatarCurrentRow[step] != row \/ 
	    		       	      	     avatarCurrentCol[step] != col,


$ Blocks and avatar cannot share same cell
forall step : int(0..steps) .
    forall block : int(1..numBlocks) .
        avatarCurrentRow[step] != blocksCurrentRow[step,block] \/
	avatarCurrentCol[step] != blocksCurrentCol[step,block],

$ Block cannot be on dead cells
forall step : int(0..steps) .
    forall block : int(1..numBlocks) .
        forall row : int(1..r) .
	    forall col : int(1..c) .
	        gridCurrent[step,row,col] = 0 -> blocksCurrentRow[step,block] != row \/
					      	 blocksCurrentCol[step,block] != col,

$ Blocks cannot share same cell				       
forall step : int(0..steps) .
    forall checkBlock : int(1..numBlocks) .
        forall otherBlock : int(1..numBlocks) .
	    checkBlock != otherBlock ->
	        blocksCurrentRow[step, checkBlock] != blocksCurrentRow[step, otherBlock] \/
		blocksCurrentCol[step, checkBlock] != blocksCurrentCol[step, otherBlock],

$ Avatar movement is only one block each step
$forall step : int(1..steps) .
$    | avatarCurrentRow[step-1] - avatarCurrentRow[step] | <= 1 /\
$    | avatarCurrentCol[step-1] - avatarCurrentCol[step] | <= 1,




$$$$
$ Movement
$$$$

$ If block has moved, avatar must have moved into block's previous location
forall step : int(1..steps) .
    forall block : int(1..numBlocks) .
        blocksCurrentRow[step-1,block] != blocksCurrentRow[step,block] \/
	blocksCurrentCol[step-1,block] != blocksCurrentCol[step,block] -> $ block has moved
	    avatarCurrentRow[step] = blocksCurrentRow[step-1,block] /\
	    avatarCurrentCol[step] = blocksCurrentCol[step-1,block],

$ Don't move block if avatar does not step into it
$forall step : int(1..steps) .
$    forall block : int(1..numBlocks) .
$       avatarCurrentRow[step] != blocksCurrentRow[step-1,block] \/
$	avatarCurrentCol[step] != blocksCurrentCol[step-1,block] ->
$	    blocksCurrentRow[step,block] = blocksCurrentRow[step-1,block] /\
$	    blocksCurrentCol[step,block] = blocksCurrentCol[step-1,block],


$ If avatar moved into block, block move same direction
forall step : int(1..steps) .
    forall block : int(1..numBlocks) .
        avatarCurrentRow[step] = blocksCurrentRow[step-1,block] /\
	avatarCurrentCol[step] = blocksCurrentCol[step-1,block] ->
	    blocksCurrentRow[step,block] = blocksCurrentRow[step-1,block] + moveRow[step] /\
	    blocksCurrentCol[step,block] = blocksCurrentCol[step-1,block] + moveCol[step],


$ Update moveRow/moveCol for avatar movement
forall step : int(1..steps) .
       moveRow[step] = avatarCurrentRow[step] - avatarCurrentRow[step-1] /\
       moveCol[step] = avatarCurrentCol[step] - avatarCurrentCol[step-1],

$ Avatar no diagonal movement
$forall step : int(1..steps) .
$    avatarCurrentRow[step-1] != avatarCurrentRow[step] ->
$    avatarCurrentCol[step-1] = avatarCurrentCol[step],
        
$forall step : int(1..steps) .
$    avatarCurrentCol[step-1] != avatarCurrentCol[step] ->
$    avatarCurrentRow[step-1] = avatarCurrentRow[step],

$ Diagonal movement not allowed and must move each turn
$ Increases time and solver nodes if not used
forall step : int(1..steps) .
    | moveRow[step] | + | moveCol[step] | = 1,


$ Grid 0 and 2s always stay the same
forall step : int(1..steps) .
    forall row : int(1..r) .
        forall col : int(1..c) .
	    gridCurrent[step-1,row,col] != 1 ->
	        gridCurrent[step,row,col] = gridCurrent[step-1,row,col],

$ Ice
forall step : int(1..steps) .
    forall row : int(1..r) .
        forall col : int(1..c) .
	    avatarCurrentRow[step-1] = row /\
	    avatarCurrentCol[step-1] = col /\
	    gridCurrent[step-1,row,col] = 1 -> $avatar on ice
	        gridCurrent[step,row,col] = 0,

$Ice not stepped on doesn't change
forall step : int(1..steps) .
    forall row : int(1..r) .
        forall col : int(1..c) .
	    gridCurrent[step-1,row,col] = 1 /\
	    (avatarCurrentRow[step-1] != row \/ 
	     avatarCurrentCol[step-1] != col) ->
	        gridCurrent[step,row,col] = 1
	
$ Broken ice stays broken
$forall step : int(0..steps) .
$    forall row : int(1..r) .
$        forall col : int(1..c) .
$	    gridInit[row,col] = 1 -> gridCurrent[step,row,col] != 2
